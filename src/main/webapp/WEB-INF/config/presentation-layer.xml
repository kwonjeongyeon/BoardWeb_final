<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- Handlermapping, Controller, ViewResolver 클래스를 <context:component-scan> 엘리먼트로 대체 -->
	<context:component-scan base-package="com.myspring.view"></context:component-scan>
	
	<!-- 파일 업로드 설정 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxUploadSize" value="100000"></property>
	</bean>
	
	<!-- 어노테이션 형식으로 예외처리 (src/main/webapp/common 참고) -->
	<!-- <mvc:annotation-driven></mvc:annotation-driven> -->
	
	<!-- HttpMessageConverter 구현을 위해 스프링 설정 파일에 등록
	: 자바 객체를 다양한 타입으로 변환하여 HTTP 응답 바디에 설정 가능 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	
	
	<!-- 예외 처리 설정 (XML 설정 방식) -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	<property name="exceptionMappings">
	<props>
	<prop key="java.lang.ArithmeticException">
	common/arithmeticError.jsp
	</prop>
	<prop key="java.lang.NullPointerException">
	common/nullPointerError.jsp
	</prop>
	</props>
	</property>
	<property name="defaultErrorView" value="common/error.jsp"></property>
	</bean>
	
	<!-- 다국어 설정 -->
	<!-- MessageSource 등록 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	<property name="basenames">
	<list>
	<value>message.messageSource</value>
	</list>
	</property>
	</bean>
	
	<!-- LocaleResolver 등록 -->
	<!-- 세션으로부터 Locale 정보를 추출하고 유지하는 SessionLocaleResolver를 가장 많이 사용한다 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
	
	
	<!-- LoclaeChangeInterceptor 등록 -->
	<!--  해당 화면의 언어를 변경하고 싶을 때 Locale 변경하기
	Setter 주입으로 paramName 값을 "lang"으로 지정했는데, 이 파라미터로 특정 Locale이 전송되면 해당 Locale로 변경하겠다는 설정 -->
	<mvc:interceptors>
	<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	<property name="paramName" value="lang"></property>
	</bean>
	</mvc:interceptors>
	
	


<!-- 	HandlerMapping 등록 
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/login.do">login</prop>
				<prop key="/getBoardList.do">getBoardList</prop>
				<prop key="/getBoard.do">getBoard</prop>
				<prop key="/insertBoard.do">insertBoard</prop>
				<prop key="/updateBoard.do">updateBoard</prop>
				<prop key="/deleteBoard.do">deleteBoard</prop>
				<prop key="/logout.do">logout</prop>
			</props>
		</property>
	</bean>
	
	ViewResolver 등록
	InternalResourceViewResolver을 설정하면 WEB-INF에 있는 JSP 파일을 View 화면으로 사용 가능 (직접적인 JSP 호출 차단)
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="prefix" value="/WEB-INF/board/"></property>
	<property name="suffix" value=".jsp"></property>
	</bean>
	
	ViewResolver를 적용했을 때, ModelAndView 객체에 저장되는 View 이름은 ViewResolver 설정을 고려하여 등록해야 함
	

	Controller 등록
	<bean id="login" class="com.myspring.view.user.LoginController"></bean>
	<bean id="getBoardList"
		class="com.myspring.view.board.GetBoardListController"></bean>
	<bean id="getBoard"
		class="com.myspring.view.board.GetBoardController"></bean>
	<bean id="insertBoard"
		class="com.myspring.view.board.InsertBoardController"></bean>
	<bean id="updateBoard"
		class="com.myspring.view.board.UpdateBoardController"></bean>
	<bean id="deleteBoard"
		class="com.myspring.view.board.DeleteBoardController"></bean>
	<bean id="logout" class="com.myspring.view.user.LogoutController"></bean> -->
	
</beans>
